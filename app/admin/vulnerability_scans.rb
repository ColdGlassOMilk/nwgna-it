ActiveAdmin.register VulnerabilityScan do
  menu priority: 1, label: 'Scans', parent: 'Vulnerabilities'

  # See permitted parameters documentation:
  # https://github.com/activeadmin/activeadmin/blob/master/docs/2-resource-customization.md#setting-up-strong-parameters
  #
  # Uncomment all parameters which should be permitted for assignment
  #
  permit_params :name

  actions :all, except: [:new]
  action_item only: :index do
    link_to 'Upload CSV', action: 'upload_csv'
  end

  collection_action :upload_csv do
    render 'admin/csv/upload_csv'
  end

  collection_action :import_csv, method: :post do
    file = params[:dump][:file]

    vscan = VulnerabilityScan.create!(name: DateTime.now)

    current_vulnerability_ids = []
    CSV.foreach(file.path, headers: true) do |row|
      data = row.to_hash.transform_keys { |key| key.downcase.gsub(/\s+/, '_').underscore }
      data['object_hash'] = data.delete('hash')
      v = Vulnerability.create_with(data).find_or_create_by(object_hash: data['object_hash'])
      v.vulnerability_scans << vscan
      v.save

      current_vulnerability_ids << v.id

      # Create associated update if this is the first scan
      if v.vulnerability_scans.count == 1
        VulnerabilityUpdate.create!(
          vulnerability_scan: vscan,
          vulnerability: v,
          update_type: :added
        )
      end
    end

    # Create :removed update for all vulnerabilities that do not include the last scan
    removed_vulnerabilities = Vulnerability.where.not(id: current_vulnerability_ids)

    removed_vulnerabilities.each do |vulnerability|
      last_update = vulnerability.vulnerability_updates.order(created_at: :desc).first

      # Only create a :removed update if the last update wasn't already a :removed update
      if last_update.nil? || last_update.update_type != "removed"
        VulnerabilityUpdate.create!(
          vulnerability_scan: vscan,
          vulnerability: vulnerability,
          update_type: :removed
        )
      end
    end

    redirect_to({ action: :index }, notice: 'CSV imported successfully')
  rescue StandardError
    redirect_to({ action: :index }, flash: { error: 'CSV imported failed! Check that the format is correct or contact a developer' })
  end
  #
  # or
  #
  # permit_params do
  #   permitted = [:name]
  #   permitted << :other if params[:action] == 'create' && current_user.admin?
  #   permitted
  # end

  index do
    selectable_column
    id_column
    column :name do |scan|
      link_to scan.name.truncate(50, seperator: ' '), admin_vulnerability_scan_path(scan)
    end
    column :added do |scan|
      scan.vulnerabilities_added.count
    end
    column :removed do |scan|
      scan.vulnerabilities_removed.count
    end
    actions
  end

end
